import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = '7827603551:AAG_Ui4ZiHWMc_arF5TQBStDO_cjQGnMIMU'  # –í–∞—à API-–∫–ª—é—á
bot = Bot(token=API_TOKEN)
dp = Dispatcher()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category TEXT NOT NULL,
            country TEXT NOT NULL,
            name TEXT NOT NULL,
            price REAL NOT NULL,
            description TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            balance REAL DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            product_id INTEGER NOT NULL,
            quantity INTEGER NOT NULL,
            total_price REAL NOT NULL,
            status TEXT DEFAULT 'pending'
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS promocodes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT NOT NULL,
            discount REAL NOT NULL,
            is_active INTEGER DEFAULT 1
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –Æ–∑–µ—Ä–Ω–µ–π–º –∞–¥–º–∏–Ω–∞
ADMIN_USERNAME = 'wwaswhere'  # –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()
    conn.close()

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí∞ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')
    keyboard.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç", callback_data='deposit')
    keyboard.button(text="üõí –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data='buy_product')
    keyboard.button(text="üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data='order_history')
    keyboard.button(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
    keyboard.adjust(2)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    await message.answer(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üåü\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )

# –ü—Ä–æ—Ñ–∏–ª—å
@dp.callback_query(F.data == 'profile')
async def profile(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    balance = cursor.fetchone()
    conn.close()

    if balance:
        await callback_query.answer()
        await callback_query.message.answer(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: *{balance[0]} USD*\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deposit –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞.",
            parse_mode="Markdown"
        )
    else:
        await callback_query.answer()
        await callback_query.message.answer('–í—ã –µ—â–µ –Ω–µ –ø–æ–ø–æ–ª–Ω—è–ª–∏ –±–∞–ª–∞–Ω—Å.')

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞
@dp.callback_query(F.data == 'deposit')
async def deposit(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    balance = cursor.fetchone()
    conn.close()

    if balance:
        await callback_query.answer()
        await callback_query.message.answer(
            f"üí≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞:\n"
            f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{balance[0]} USD*\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É: @{ADMIN_USERNAME}",
            parse_mode="Markdown"
        )

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
@dp.callback_query(F.data == 'order_history')
async def order_history(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT products.name, orders.quantity, orders.total_price, orders.status
        FROM orders
        JOIN products ON orders.product_id = products.id
        WHERE orders.user_id = ?
    ''', (user_id,))
    orders = cursor.fetchall()
    conn.close()

    if orders:
        orders_list = "\n".join([f"üõí {order[0]} | üßÆ {order[1]} —à—Ç. | üí∞ {order[2]} USD | üö¶ {order[3]}" for order in orders])
        await callback_query.answer()
        await callback_query.message.answer(
            f"üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n{orders_list}",
            parse_mode="Markdown"
        )
    else:
        await callback_query.answer()
        await callback_query.message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.')

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.callback_query(F.data == 'support')
async def support(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @{ADMIN_USERNAME}",
        parse_mode="Markdown"
    )

# –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query(F.data == 'buy_product')
async def buy_product(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìÑ –°–∫–∞–Ω—ã SSN", callback_data='category_ssn')
    keyboard.button(text="üìÑ –°–∫–∞–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–æ–≤", callback_data='category_passport')
    keyboard.button(text="üìÑ –°–∫–∞–Ω—ã DL", callback_data='category_dl')
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')
    keyboard.adjust(1)  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
    await callback_query.answer()
    await callback_query.message.answer(
        "üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=keyboard.as_markup()
    )

# –ü–æ–¥–º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω
@dp.callback_query(F.data.startswith('category_'))
async def category_menu(callback_query: types.CallbackQuery):
    category = callback_query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (ssn, passport, dl)

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üá∫üá∏ –°–®–ê", callback_data=f'country_{category}_usa')
    keyboard.button(text="üá®üá¶ –ö–∞–Ω–∞–¥–∞", callback_data=f'country_{category}_canada')
    keyboard.button(text="üá™üá∫ –ï–≤—Ä–æ–ø–∞", callback_data=f'country_{category}_europe')
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data='buy_product')
    keyboard.adjust(2)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    await callback_query.answer()
    await callback_query.message.answer(
        f"üõí –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}*:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç—Ä–∞–Ω–µ
@dp.callback_query(F.data.startswith('country_'))
async def show_products(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    category = data[1]  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è (ssn, passport, dl)
    country = data[2]   # –°—Ç—Ä–∞–Ω–∞ (usa, canada, europe)

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, name, price, description FROM products WHERE category = ? AND country = ?', (category, country))
    products = cursor.fetchall()
    conn.close()

    if products:
        keyboard = InlineKeyboardBuilder()
        for product in products:
            keyboard.button(text=f"{product[1]} - {product[2]} USD", callback_data=f'product_{product[0]}')
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f'category_{category}')
        keyboard.adjust(1)  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        await callback_query.answer()
        await callback_query.message.answer(
            f"üõí –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}* ({country}):",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    else:
        await callback_query.answer()
        await callback_query.message.answer('–¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith('product_'))
async def select_product(callback_query: types.CallbackQuery):
    product_id = callback_query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name, price, description FROM products WHERE id = ?', (product_id,))
    product = cursor.fetchone()
    conn.close()

    if product:
        name, price, description = product
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f'buy_{product_id}')
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f'category_{callback_query.message.text.split()[-2]}')  # –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        keyboard.adjust(1)

        await callback_query.answer()
        await callback_query.message.answer(
            f"üõí –¢–æ–≤–∞—Ä: *{name}*\n"
            f"üí∞ –¶–µ–Ω–∞: *{price} USD*\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: *{description}*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    else:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith('buy_'))
async def buy_product(callback_query: types.CallbackQuery):
    product_id = callback_query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name, price, description FROM products WHERE id = ?', (product_id,))
    product = cursor.fetchone()
    conn.close()

    if product:
        name, price, description = product
        user_id = callback_query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        balance = cursor.fetchone()
        conn.close()

        if balance and balance[0] >= price:
            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            conn = sqlite3.connect('bot_database.db')
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (price, user_id))
            cursor.execute('INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (?, ?, 1, ?)',
                          (user_id, product_id, price))
            conn.commit()
            conn.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            await callback_query.answer()
            await callback_query.message.answer(
                f"‚úÖ –¢–æ–≤–∞—Ä *{name}* —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n"
                f"{description}",
                parse_mode="Markdown"
            )
        else:
            await callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
    else:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ê–¥–º–∏–Ω–∫–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Command("users"))
async def view_users(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT username, balance FROM users')
    users = cursor.fetchall()
    conn.close()

    if users:
        users_list = "\n".join([f"üë§ @{user[0]} | üí∞ {user[1]} USD" for user in users])
        await message.answer(
            f"üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users_list}",
            parse_mode="Markdown"
        )
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –ê–¥–º–∏–Ω–∫–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
@dp.message(Command("orders"))
async def view_orders(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT orders.id, users.username, products.name, orders.quantity, orders.total_price, orders.status
        FROM orders
        JOIN users ON orders.user_id = users.user_id
        JOIN products ON orders.product_id = products.id
    ''')
    orders = cursor.fetchall()
    conn.close()

    if orders:
        orders_list = "\n".join([f"üì¶ –ó–∞–∫–∞–∑ #{order[0]} | üë§ @{order[1]} | üõí {order[2]} | üßÆ {order[3]} —à—Ç. | üí∞ {order[4]} USD | üö¶ {order[5]}" for order in orders])
        await message.answer(
            f"üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n{orders_list}",
            parse_mode="Markdown"
        )
    else:
        await message.answer("–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –ê–¥–º–∏–Ω–∫–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message(Command("add_product"))
async def add_product(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=5)  # –§–æ—Ä–º–∞—Ç: /add_product <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—Å—Ç—Ä–∞–Ω–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>
    if len(args) < 6:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_product <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—Å—Ç—Ä–∞–Ω–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
        return

    _, category, country, name, price, description = args

    try:
        price = float(price.replace(',', '.'))  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 50.0 –∏–ª–∏ 50")
        return

    valid_categories = ['ssn', 'passport', 'dl']
    valid_countries = ['usa', 'canada', 'europe']

    if category not in valid_categories:
        await message.answer(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(valid_categories)}")
        return

    if country not in valid_countries:
        await message.answer(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç—Ä–∞–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç—Ä–∞–Ω—ã: {', '.join(valid_countries)}")
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO products (category, country, name, price, description) VALUES (?, ?, ?, ?, ?)',
                   (category, country, name, price, description))
    conn.commit()
    conn.close()

    await message.answer(f'–¢–æ–≤–∞—Ä "{name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category}" ({country}).')

# –ê–¥–º–∏–Ω–∫–∞: —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message(Command("delete_product"))
async def delete_product(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)  # –§–æ—Ä–º–∞—Ç: /delete_product <id —Ç–æ–≤–∞—Ä–∞>
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_product <id —Ç–æ–≤–∞—Ä–∞>")
        return

    _, product_id = args

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM products WHERE id = ?', (product_id,))
    conn.commit()
    conn.close()

    await message.answer(f'–¢–æ–≤–∞—Ä —Å ID {product_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.')

# –ê–¥–º–∏–Ω–∫–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(Command("add_promo"))
async def add_promo(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=2)  # –§–æ—Ä–º–∞—Ç: /add_promo <–∫–æ–¥> <—Å–∫–∏–¥–∫–∞>
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_promo <–∫–æ–¥> <—Å–∫–∏–¥–∫–∞>")
        return

    _, code, discount = args

    try:
        discount = float(discount.replace(',', '.'))  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    except ValueError:
        await message.answer("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 10.0 –∏–ª–∏ 10")
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO promocodes (code, discount) VALUES (?, ?)', (code, discount))
    conn.commit()
    conn.close()

    await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ "{code}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.')

# –ê–¥–º–∏–Ω–∫–∞: —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(Command("delete_promo"))
async def delete_promo(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)  # –§–æ—Ä–º–∞—Ç: /delete_promo <–∫–æ–¥>
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_promo <–∫–æ–¥>")
        return

    _, code = args

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM promocodes WHERE code = ?', (code,))
    conn.commit()
    conn.close()

    await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ "{code}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.')

# –ê–¥–º–∏–Ω–∫–∞: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("set_balance"))
async def set_balance(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=2)  # –§–æ—Ä–º–∞—Ç: /set_balance <username> <–±–∞–ª–∞–Ω—Å>
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_balance <username> <–±–∞–ª–∞–Ω—Å>")
        return

    _, username, balance = args

    try:
        balance = float(balance.replace(',', '.'))  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    except ValueError:
        await message.answer("–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 100.0 –∏–ª–∏ 100")
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET balance = ? WHERE username = ?', (balance, username))
    conn.commit()
    conn.close()

    await message.answer(f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *{balance} USD*.', parse_mode="Markdown")

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == 'back_to_main')
async def back_to_main(callback_query: types.CallbackQuery):
    await start(callback_query.message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    import asyncio
    asyncio.run(dp.start_polling(bot))
